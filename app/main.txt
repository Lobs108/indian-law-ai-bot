from fastapi import FastAPI, Request
import os
import google.generativeai as genai
import fitz  # PyMuPDF
import docx
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode
import asyncio

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GENAI_API_KEY = os.getenv("GENAI_API_KEY")

genai.configure(api_key=GENAI_API_KEY)

session = AiohttpSession()
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML, session=session)
dp = Dispatcher()
app = FastAPI()


def ask_lawyer(prompt):
    model = genai.GenerativeModel("gemini-1.5-pro-002")
    response = model.generate_content(prompt)
    return response.text


def extract_text_from_pdf(pdf_path):
    try:
        doc = fitz.open(pdf_path)
        return "\n".join([page.get_text("text") for page in doc]) or "‚ö†Ô∏è No text found in PDF."
    except Exception as e:
        return f"‚ùå PDF error: {e}"


def extract_text_from_docx(docx_path):
    try:
        doc = docx.Document(docx_path)
        return "\n".join([para.text for para in doc.paragraphs]) or "‚ö†Ô∏è No text found in DOCX."
    except Exception as e:
        return f"‚ùå DOCX error: {e}"


def analyze_document(file_path):
    if not os.path.exists(file_path):
        return "‚ùå File not found."
    if file_path.endswith(".pdf"):
        text = extract_text_from_pdf(file_path)
    elif file_path.endswith(".docx"):
        text = extract_text_from_docx(file_path)
    else:
        return "‚ö†Ô∏è Only .pdf and .docx supported."
    return ask_lawyer(f"Summarize this legal document:\n\n{text}")


@app.post("/")
async def telegram_webhook(req: Request):
    update = types.Update.model_validate(await req.json())
    await dp.feed_update(bot=bot, update=update)
    return {"ok": True}


@dp.message()
async def handle_message(message: types.Message):
    if message.document:
        file = await bot.get_file(message.document.file_id)
        file_path = f"temp_{message.document.file_name}"
        await bot.download_file(file.file_path, file_path)
        response = analyze_document(file_path)
        os.remove(file_path)
        await message.answer(f"üìÑ <b>Document summary:</b>\n{response}")
    else:
        response = ask_lawyer(message.text)
        await message.answer(f"ü§ñ <b>Answer:</b>\n{response}")


@app.on_event("startup")
async def on_startup():
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        await bot.set_webhook(webhook_url)
